"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ODataBatch = void 0;
const request_1 = require("./request");
const response_1 = require("./response");
const ODataBatchAxiosRepository_1 = require("./ODataBatchAxiosRepository");
class ODataBatch {
    constructor({ url, headers, auth, calls, batchResponseType = 'json', individualResponseType = 'json' }, batchRepository = new ODataBatchAxiosRepository_1.ODataBatchAxiosRepository()) {
        this.ensureHasCalls(calls);
        this.boundary = new Date().getTime().toString();
        this.headers = headers;
        this.auth = auth;
        this.url = url;
        this.batchRepository = batchRepository;
        this.requestResponseType = {
            contentType: batchResponseType === 'json' ? 'application/json' : 'application/xml',
            accept: individualResponseType === 'json' ? 'application/json' : 'application/xml',
        };
        this.batchRequest = request_1.requestsToBatch(calls, this.boundary, this.requestResponseType);
    }
    send() {
        const config = {
            headers: {
                ...this.headers,
                Authorization: this.headers.Authorization || `Basic ${this.auth}`,
                Accept: this.requestResponseType.accept,
                'Content-Type': 'multipart/mixed; boundary=batch_' + this.boundary
            },
        };
        return this.batchRepository.send(this.url, this.batchRequest, config, this.requestResponseType.accept, response_1.BatchResponse);
    }
    ensureHasCalls(data) {
        if (data.length <= 0) {
            throw new Error('No calls have been passed');
        }
    }
}
exports.ODataBatch = ODataBatch;
//# sourceMappingURL=ODataBatch.js.map