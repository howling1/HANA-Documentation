export interface BatchResponseParsed {
    code: string;
    status: string;
    headers: {
        key: string;
        value: string;
    }[];
    data: any[];
    success: boolean;
}
export interface BatchResponseInterface {
    response: BatchResponseParsed[];
}
export interface BatchResponseConstructor {
    new (OResponse: {
        data: any;
        headers: any;
    }, accept: string): BatchResponseInterface;
}
export declare function createBatchResponse(ctor: BatchResponseConstructor, OResponse: {
    data: any;
    headers: any;
}, accept: string): BatchResponseInterface;
export declare class BatchResponse implements BatchResponseInterface {
    private boundary;
    private accept;
    response: BatchResponseParsed[];
    constructor({ data, headers }: any, accept: string);
    ensureHasAccept(): void;
    parseResponse(part: string): BatchResponseParsed;
    parseData(sData: string): any;
    parseBatch(body: string): BatchResponseParsed[];
    getBoundary(headers: {
        [x: string]: any;
    }): any;
    ensureHasBoundary(boundaryMatch: RegExpExecArray): void;
}
